name: Playwright Tests with Allure Report

on:
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  e2eTest:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@v4
      
      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      
      # Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # Install Playwright
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      # Create notifications directory
      - name: Prepare notifications directory
        run: |
          mkdir -p notifications
          wget https://github.com/qa-guru/allure-notifications/releases/download/4.9.0/allure-notifications-4.9.0.jar -O notifications/allure-notifications.jar
      
      # Run tests with Allure reporting
      - name: Run Playwright tests with Allure
        run: |
          start_time=$(date +%s)
          allurectl watch -- npx playwright test || true
          end_time=$(date +%s)
          echo "DURATION_SECONDS=$((end_time - start_time))" >> $GITHUB_ENV
        env:
          ALLURE_RESULTS: './allure-results'
      
      # Generate Allure report
      - name: Generate Allure report
        if: always()
        run: |
          allure generate allure-results -o allure-report --clean
      
      # Prepare notification data
      - name: Prepare notification data
        if: always()
        run: |
          # Create config file
          cat <<EOF > config.json
          {
            "base": {
              "project": "JS PW QA",
              "environment": "prod",
              "comment": "smoke tests",
              "reportLink": "https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-report",
              "language": "en",
              "allureFolder": "allure-report",
              "enableChart": true
            },
            "telegram": {
              "token": "${{ secrets.TELEGRAM_BOT_TOKEN }}",
              "chat": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "replyTo": ""
            }
          }
          EOF
          
          # Create duration file
          echo "{\"time\": {\"duration\": ${{ env.DURATION_SECONDS }}}" > duration.json
          
          # Copy summary.json from results
          cp allure-results/summary.json . || echo "{}" > summary.json
      
      # Setup Java
      - name: Setup Java 17
        if: always()
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      # Send notification (updated command)
      - name: Send Telegram notification
        if: always()
        run: |
          java -DconfigFile=config.json \
               -DdurationFile=duration.json \
               -DsummaryFile=summary.json \
               -jar notifications/allure-notifications.jar
      
      # Upload artifacts
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results
            allure-results
            allure-report
          retention-days: 20
